#!/usr/bin/env python3

import sys
import argparse
import time
import math
from petsys import daqd, spi

PROM_CHIP_ID = 0xFFEF
BOOT_OFFSET = 0x800000

def main(argv):
	parser = argparse.ArgumentParser(description='Boot FPGA into update image')
	parser.add_argument("--port", default=0, help="Unit port ID")
	parser.add_argument("--slave", default=0, help="Unit slaveID ID")
	parser.add_argument("--force", default=False, action="store_true", help="Force boot")

	args = parser.parse_args()



	conn = daqd.Connection()
	#protocol = conn.read_config_register(args.port, args.slave, 64, 0xFFF8)

	boot_status = conn.read_config_register(args.port, args.slave, 32, 0x02A0)
	if (boot_status & 0xFF00) != 0:
		if not args.force:
			sys.stderr.write("FPGA was booted into the update image before.\n")
			sys.stderr.write("Use --force to force booting into update image.\n")
			return 1
	
	boot_header = make_image_header()
	l = len(boot_header)
	d = spi.generic_nand_flash_read(conn, args.port, args.slave, PROM_CHIP_ID, BOOT_OFFSET, l)
	if d != boot_header:
		sys.stderr.write("ERROR: 0x%08X does not contain an image!\n" % BOOT_OFFSET)
		return 2

	boot_sector_marker = bytes([ 0xFF for k in range(8) ])
	d = spi.generic_nand_flash_read(conn, args.port, args.slave, PROM_CHIP_ID, BOOT_OFFSET+248, 8)
	if d == boot_sector_marker:
		sys.stderr.write("ERROR: 0x%08X contains a boot sector, not a boot image!\n")
		return 2

	conn.write_config_register(args.port, args.slave, 32, 0x02C8, 0x800000)
	conn.write_config_register(args.port, args.slave, 1, 0x299, 0b1)

	print("Waiting for FPGA to reboot...")
	time.sleep(10)

	boot_en = conn.read_config_register(args.port, args.slave, 1, 0x299)
	if boot_en != 0:
		sys.stderr.write("ERROR: FPGA did not reboot.\n")
		return 3

	boot_status = conn.read_config_register(args.port, args.slave, 32, 0x02A0)

	return 0

def make_image_header():
	boot_sector = [
		0xFFFFFFFF,
		0xFFFFFFFF,
		0xFFFFFFFF,
		0xFFFFFFFF,
		0xFFFFFFFF,
		0xFFFFFFFF,
		0xFFFFFFFF,
		0xFFFFFFFF,
		0x000000BB,
		0x11220044,
		0xFFFFFFFF,
		0xFFFFFFFF,
		0xAA995566,
		0x20000000
	]

	s = []
	for word in boot_sector:
		s += [ (word >> 24) & 0xFF, (word >> 16) & 0xFF, (word >> 8) & 0xFF, word & 0xFF ]
	return bytes(s)



if __name__ == '__main__':
	sys.exit(main(sys.argv))
