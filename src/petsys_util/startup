#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse
import math
from math import sqrt, fabs
from time import sleep, time
import sys


#systemConfig = config.ConfigFromFile("config_example.ini", loadMask=0)
systemConfig = config.Config()
daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)

#daqd.openRawAcquisition(args.fileNamePrefix, qdcMode=True)
asicsConfig = daqd.getAsicsConfig()
prevT = [-999]

nSteps = 10

for it in range(0,nSteps,1):        
        T = []
        isStable = True                                                                       
        for portID, slaveID in daqd.getActiveFEBDs():
                femType = daqd.read_config_register(portID, slaveID, 16, 0x0002)
                print("FEB/D portID %2d slaveID %2d Temperature measurements: " % (portID, slaveID));
                if femType == 0x0000:
                        # TOFPET 2 TB with TMP104 sensors
                        nSensors = daqd.fe_temp_enumerate_tmp104(portID, slaveID)
                        tmp104Readings = daqd.fe_temp_read_tmp104(portID, slaveID, nSensors)
                        for i, value in enumerate(tmp104Readings):
                                if i%2==0:
                                        print("\tSensor %2d: %2d ºC" % (i, value)) 
                                        T.append(value)
                elif femType == 0x0001:
                        # FEM-128 with MAX111xx ADC
                        for i in range(8):
                                if not daqd.fe_temp_check_max1111xx(portID, slaveID, i):
                                        print("\tPort %d: not present" % i)
                                else:
                                        for j in range(4):
                                                u = daqd.fe_temp_read_max111xx(portID, slaveID, i, j)
                                                v = u*2.5/4.096
                                                if j in [0, 3]:
                                                        # LMT86
                                                        temp = 30-(10.888-sqrt(118.548544+0.01388*(1777.3-v)))/0.00694
                                                        if temp > 100:
                                                                continue
                                                        if j == 0 or j == 3:
                                                                 T.append(temp)
                                                                 print("\tSensor %2d:%d: %7.2f ºC (%5d ADC or %5.1f mV)" % (i, j, temp, u, v))
                                                else:
                                                        # LMT70
                                                        temp = 205.5894-0.1814103*v-3.325395*10**-6*(v)**2-1.809628*10**-9*(v)**3
						
                                              
        
        for t1, t2 in zip(T,prevT):
                if fabs(t1-t2) > 0.2:
                        sleep(60)
                        isStable = False
                        prevT = T 
                        break
        if isStable == True:
                print("\nASIC temperatures stable over the last minute. System ready to acquire.")
                sys.exit(0)

sys.exit(1)


                                
