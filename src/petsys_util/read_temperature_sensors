#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from petsys import daqd, fe_temperature
from math import sqrt
import time
import argparse
import sys



def moduleSensors(sensor_list,nSensors):
    return (sensor_list[pos:pos+nSensors] for pos in range(0, len(sensor_list),nSensors)) 

def write_tree(sensor_list):
    nSensors = 4
    locations_list = [sensor.get_location() for sensor in sensor_list]
    if any(location[3] > 1 for location in locations_list):
        nSensors = 8
    print("---------------------------------------- "+time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time())) +" ----------------------------------------------")
    print("portID\t\tslaveID\t\tmoduleID\tA1 sensor\t  A2 sensor\t  S1 sensor\t  S2 sensor")    
    
    
    for femSensors in moduleSensors(sensor_list, nSensors):
        (portID, slaveID, moduleID, sensorID, sensorPlace) = femSensors[0].get_location()
        for sensor in femSensors:
            loc = sensor.get_location()    
            if(loc[3] == 0 and loc[4] == "asic"):
                t1 = sensor.get_temperature()
            if(loc[3] == 1 and loc[4] == "asic"):
                t2 = sensor.get_temperature()
            if(loc[3] == 0 and loc[4] == "sipm"):
                t3 = sensor.get_temperature()
            if(loc[3] == 1 and loc[4] == "sipm"):
                t4 = sensor.get_temperature()        
        print("%d\t\t%d\t\t%d\t      %7.2f ºC\t%7.2f ºC\t%7.2f ºC\t%7.2f ºC" % (portID, slaveID, moduleID, t1, t2, t3, t4))
    print("-----------------------------------------------------------------------------------------------------------\n") 
    
def write_table_header(fd, sensor_list):
    locations_list = [sensor.get_location() for sensor in sensor_list]
    fd.write("# Absolute Sensor ID format : portID_slaveID_moduleID_SensorID\n")
    fd.write("# Sensor ID is:\n")
    if any(location[3] > 1 for location in locations_list): #module is FEM256
        fd.write("# A1 - Sensor 1 on FEM 256 (ASIC)\n")
        fd.write("# A2 - Sensor 2 on FEM 256 (ASIC)\n")
        fd.write("# A3 - Sensor 3 on FEM 256 (ASIC)\n")
        fd.write("# A4 - Sensor 4 on FEM 256 (ASIC)\n")  
        fd.write("# S1 - Sensor 1 on FEB/S (SIPM)\n")
        fd.write("# S2 - Sensor 2 on FEB/S (SIPM)\n")
        fd.write("# S3 - Sensor 3 on FEB/S (SIPM)\n")
        fd.write("# S4 - Sensor 4 on FEB/S (SIPM)\n")                       
    else:
        fd.write("# A1 - Sensor on FEB/A (ASIC) connected to port J1 of the FEB/I\n")
        fd.write("# A2 - Sensor on FEB/A (ASIC) connected to port J2 of the FEB/I\n")
        fd.write("# S1 - Sensor on FEB/S (SIPM) connected to port J1 of the FEB/I\n")
        fd.write("# S2 - Sensor on FEB/S (SIPM) connected to port J2 of the FEB/I\n")               

    fd.write("#\n#DAQ timestamp\tSystem time")

    for (portID,slaveID, moduleID, sensorID, sensorPlace) in locations_list:
         sid = 'A'+ str(sensorID+1)   
         if sensorPlace == "sipm":
             sid = 'S'+ str(sensorID+1)   
         fd.write("\t%d_%d_%d_%s" % (portID,slaveID,moduleID,sid))
    fd.write("\n")
         
def write_table_row(fd, sensor_list, timestamp):
    fd.write("%d\t%d" %(timestamp, time.time()))
    for sensor in sensor_list:
        fd.write("\t%.2f" % sensor.get_temperature())
    fd.write("\n")
    fd.flush()
    
def main(argv):
    parser = argparse.ArgumentParser(description='Measure temperature from all connected sensors')
    parser.add_argument("--time", type=float, required=False, default=0, help="Acquisition time (in seconds)")
    parser.add_argument("--interval", type=float, required=False, default=10, help="Measurement interval (in seconds)")
    parser.add_argument("-o", type=str, dest="fileName", required=False, default="/dev/null", help="Data filename")
    args = parser.parse_args()

    connection = daqd.Connection()
    
    sensor_list = fe_temperature.get_sensor_list(connection)

    if sensor_list is []:
        print("WARNING: No sensors found. Check connections and power")
        return 1

    dataFile = open(args.fileName, "w")

    write_table_header(dataFile, sensor_list)
    
    tEnd = time.time() + args.time

    isFirst = True
        
    while True:
        tNextRead = time.time() + args.interval
        timestamp = connection.getCurrentTimeTag()
        
        write_tree(sensor_list)
        write_table_row(dataFile, sensor_list, timestamp) 
                
       	if tNextRead > tEnd:
            break
			
        tNow = time.time()
        if tNextRead > tNow:
            time.sleep(tNextRead - tNow)
    return 0

if __name__ == '__main__':
	sys.exit(main(sys.argv))
